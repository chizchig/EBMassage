name: Build and Deploy
on:
  push:
    branches: 
      - master
  pull_request:
    branches:
      - master

permissions:
  id-token: write
  contents: read

jobs:
  deploy-infrastructure:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./aws_infra
    # outputs:
    #   ecr_repository_url: ${{ steps.terraform-output.outputs.ecr_url }}  # Added outputs section

    steps:
    - name: 'Checkout'
      uses: actions/checkout@v4

    - name: 'Configure AWS Credentials'
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
        aws-region: us-east-1
        role-session-name: GitHubActions-${{ github.run_id }}
        role-duration-seconds: 3600
        audience: sts.amazonaws.com

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_wrapper: false

    - name: Terraform Init
      run: terraform init

    - name: Terraform Plan
      run: terraform plan -no-color

    - name: Terraform Apply
      if: github.ref == 'refs/heads/master' && github.event_name == 'push'
      run: terraform apply -auto-approve

    - name: Get Terraform Outputs
      id: terraform-output
      if: github.ref == 'refs/heads/master' && github.event_name == 'push'
      run: |
        if output=$(terraform output -raw ecr_repository_url 2>&1); then
          echo "ecr_url=${output}" >> $GITHUB_OUTPUT
        else
          echo "Error getting ECR URL: ${output}"
          exit 1
        fi

    # -  name: Terraform Destroy
    #    if: github.ref == 'refs/heads/master' && github
    #    run: terraform destroy -auto-approve

  build-and-push:
    runs-on: ubuntu-latest
    needs: deploy-infrastructure
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'

    steps:
    - name: 'Checkout code'
      uses: actions/checkout@v4

    - name: 'Configure AWS credentials'
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
        aws-region: us-east-1
        role-session-name: GitHubActions-${{ github.run_id }}

    - name: 'Login to Amazon ECR'
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build and push Docker image
      env:
        ECR_REGISTRY: ${{ needs.deploy-infrastructure.outputs.ecr_repository_url }}
        IMAGE_TAG: latest
      run: |
        docker build -t $ECR_REGISTRY:$IMAGE_TAG .
        docker push $ECR_REGISTRY:$IMAGE_TAG